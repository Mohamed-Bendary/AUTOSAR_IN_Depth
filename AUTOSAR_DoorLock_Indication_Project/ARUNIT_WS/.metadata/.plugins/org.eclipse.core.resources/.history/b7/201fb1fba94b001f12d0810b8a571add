<?xml version="1.0" encoding="UTF-8"?>
<AUTOSAR xmlns="http://autosar.org/schema/r4.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://autosar.org/schema/r4.0 autosar_4-2-1.xsd">
    <AR-PACKAGES>
		<!-- Learn In depth Eng.Bendary AUTOSAR_DoorLock_Project-->
		<AR-PACKAGE>
			<SHORT-NAME>MyDataTypes</SHORT-NAME>
			<ELEMENTS>
				<DATA-CONSTR>
					<SHORT-NAME>DataC_uint8</SHORT-NAME>
					<DATA-CONSTR-RULES>
						<DATA-CONSTR-RULE>			
							<PHYS-CONSTRS>
								<LOWER-LIMIT>0</LOWER-LIMIT>
								<UPPER-LIMIT>255</UPPER-LIMIT>
							</PHYS-CONSTRS>
							<INTERNAL-CONSTRS>
								<LOWER-LIMIT>0</LOWER-LIMIT>
								<UPPER-LIMIT>255</UPPER-LIMIT>
							</INTERNAL-CONSTRS>
						</DATA-CONSTR-RULE>
					</DATA-CONSTR-RULES>
				</DATA-CONSTR>
				<SW-BASE-TYPE>
					<SHORT-NAME>myuint8</SHORT-NAME>
					<CATEGORY>FIXED_LENGTH</CATEGORY>
					<BASE-TYPE-SIZE>8</BASE-TYPE-SIZE>
					<BASE-TYPE-ENCODING>NONE</BASE-TYPE-ENCODING>
					<NATIVE-DECLARATION>unsigned char</NATIVE-DECLARATION>
				</SW-BASE-TYPE>
				<IMPLEMENTATION-DATA-TYPE>
					<SHORT-NAME>myuint8</SHORT-NAME>
					<CATEGORY>VALUE</CATEGORY>
					<SW-DATA-DEF-PROPS>
						<SW-DATA-DEF-PROPS-VARIANTS>
							<SW-DATA-DEF-PROPS-CONDITIONAL>
								<BASE-TYPE-REF DEST="SW-BASE-TYPE">/MyDataTypes/myuint8</BASE-TYPE-REF>
								<DATA-CONSTR-REF DEST="DATA-CONSTR">/MyDataTypes/DataC_uint8</DATA-CONSTR-REF>
							</SW-DATA-DEF-PROPS-CONDITIONAL>
						</SW-DATA-DEF-PROPS-VARIANTS>
					</SW-DATA-DEF-PROPS>
				</IMPLEMENTATION-DATA-TYPE>
			</ELEMENTS>
		</AR-PACKAGE>
		<AR-PACKAGE>
			<SHORT-NAME>Interfaces</SHORT-NAME>
			<ELEMENTS>
				<!--Defining the SR interface which will carry the Door state (open/closed) -->
				<SENDER-RECEIVER-INTERFACE>
					<SHORT-NAME>IF_SR_DoorLockSens</SHORT-NAME>
					<DATA-ELEMENTS>
						<VARIABLE-DATA-PROTOTYPE>
							<SHORT-NAME>DoorLock_State</SHORT-NAME>
							<TYPE-TREF DEST="IMPLEMENTATION-DATA-TYPE">/MyDataTypes/myuint8</TYPE-TREF>
							<INIT-VALUE>
								<NUMERICAL-VALUE-SPECIFICATION>
									<VALUE>0</VALUE>
								</NUMERICAL-VALUE-SPECIFICATION>
							</INIT-VALUE>
						</VARIABLE-DATA-PROTOTYPE>
					</DATA-ELEMENTS>
				</SENDER-RECEIVER-INTERFACE>
				
				<CLIENT-SERVER-INTERFACE>
				<!--Defining the CS interface which will operate LED operations based on the door state -->
					<SHORT-NAME>IF_CS_LED</SHORT-NAME>
					<OPERATIONS>
					<CLIENT-SERVER-OPERATION>
						<SHORT-NAME>LED_Switch</SHORT-NAME>
					<ARGUMENTS>
					<ARGUMENT-DATA-PROTOTYPE>
						<SHORT-NAME>LED_State</SHORT-NAME>
						<TYPE-TREF DEST="IMPLEMENTATION-DATA-TYPE">/MyDataTypes/myuint8</TYPE-TREF>
						<DIRECTION>IN</DIRECTION>
					</ARGUMENT-DATA-PROTOTYPE>	
					</ARGUMENTS>
					<!--New part in CS interface to refrence an error return type which refrence an Error occured
						in the operation or not (E_Ok , E_NotOk)-->
					<POSSIBLE-ERROR-REFS>
					<POSSIBLE-ERROR-REF DEST="APPLICATION-ERROR">/Interfaces/IF_CS_LED/E_Ok</POSSIBLE-ERROR-REF>	
					<POSSIBLE-ERROR-REF DEST="APPLICATION-ERROR">/Interfaces/IF_CS_LED/E_Not_Ok</POSSIBLE-ERROR-REF>
					</POSSIBLE-ERROR-REFS>	
					
					
					</CLIENT-SERVER-OPERATION>	
					
					
					</OPERATIONS>
					<!--Here we implement the Different possible errors this CS interface operations could use
						Where every CS operation could refrence from the below implementation what it wants  -->
					<POSSIBLE-ERRORS>
					<APPLICATION-ERROR>
						<SHORT-NAME>E_Ok</SHORT-NAME>
						<ERROR-CODE>0</ERROR-CODE>
					</APPLICATION-ERROR>	
					
					<APPLICATION-ERROR>
						<SHORT-NAME>E_Not_Ok</SHORT-NAME>
					    <ERROR-CODE>1</ERROR-CODE>
					</APPLICATION-ERROR>
					</POSSIBLE-ERRORS>
				</CLIENT-SERVER-INTERFACE>
			</ELEMENTS>
		</AR-PACKAGE>
		<AR-PACKAGE>
			<SHORT-NAME>SWCs</SHORT-NAME>
			<ELEMENTS>
			<ECU-ABSTRACTION-SW-COMPONENT-TYPE>
				<SHORT-NAME>DoorSensorAbstractionSWC</SHORT-NAME>
			<PORTS>
			<P-PORT-PROTOTYPE>
				<SHORT-NAME>PP_SR_DoorSens</SHORT-NAME>
			<PROVIDED-INTERFACE-TREF DEST="SENDER-RECEIVER-INTERFACE">/Interfaces/IF_SR_DoorLockSens</PROVIDED-INTERFACE-TREF>
			</P-PORT-PROTOTYPE>	
			
			<P-PORT-PROTOTYPE>
				<SHORT-NAME>PP_CS_LedSwitch</SHORT-NAME>
			<PROVIDED-INTERFACE-TREF DEST="CLIENT-SERVER-INTERFACE">/Interfaces/IF_CS_LED</PROVIDED-INTERFACE-TREF>
			</P-PORT-PROTOTYPE>
			
			
			</PORTS>
			
			<INTERNAL-BEHAVIORS>
			<SWC-INTERNAL-BEHAVIOR>
				<SHORT-NAME>IB_DoorLockAbstractionSWC</SHORT-NAME>
				<EVENTS>
				<TIMING-EVENT>
					<SHORT-NAME>TE_10ms</SHORT-NAME>
					<START-ON-EVENT-REF DEST="RUNNABLE-ENTITY">/SWCs/DoorSensorAbstractionSWC/IB_DoorLockAbstractionSWC/ReadDoorSensor</START-ON-EVENT-REF>
					<PERIOD>0.01</PERIOD>
				</TIMING-EVENT>	
				<OPERATION-INVOKED-EVENT>
					<SHORT-NAME>OIE_LedSwitch</SHORT-NAME>
					<START-ON-EVENT-REF DEST="RUNNABLE-ENTITY">/SWCs/DoorSensorAbstractionSWC/IB_DoorLockAbstractionSWC/LedSwitch</START-ON-EVENT-REF>
					<OPERATION-IREF>
					<CONTEXT-P-PORT-REF DEST="P-PORT-PROTOTYPE">/SWCs/DoorSensorAbstractionSWC/PP_CS_LedSwitch</CONTEXT-P-PORT-REF>	
					<TARGET-PROVIDED-OPERATION-REF DEST="CLIENT-SERVER-OPERATION">/Interfaces/IF_CS_LED/LED_Switch</TARGET-PROVIDED-OPERATION-REF>
					
					</OPERATION-IREF>
				</OPERATION-INVOKED-EVENT>
				
				</EVENTS>	
				<RUNNABLES>
				<RUNNABLE-ENTITY>
					<SHORT-NAME>ReadDoorSensor</SHORT-NAME>
					<MINIMUM-START-INTERVAL>0.0</MINIMUM-START-INTERVAL>
					<CAN-BE-INVOKED-CONCURRENTLY>false</CAN-BE-INVOKED-CONCURRENTLY>
					<DATA-WRITE-ACCESSS>
					<VARIABLE-ACCESS>
						<SHORT-NAME>DA_DOORSTATE</SHORT-NAME>
						<ACCESSED-VARIABLE>
						<AUTOSAR-VARIABLE-IREF>
						<PORT-PROTOTYPE-REF DEST="P-PORT-PROTOTYPE">/SWCs/DoorSensorAbstractionSWC/PP_SR_DoorSens</PORT-PROTOTYPE-REF>	
						<TARGET-DATA-PROTOTYPE-REF DEST="VARIABLE-DATA-PROTOTYPE">/Interfaces/IF_SR_DoorLockSens/DoorLock_State</TARGET-DATA-PROTOTYPE-REF>
						</AUTOSAR-VARIABLE-IREF>		
						</ACCESSED-VARIABLE>
					</VARIABLE-ACCESS>	
					</DATA-WRITE-ACCESSS>
					<SYMBOL>ReadDoorSensor_Runnable</SYMBOL>
					
				</RUNNABLE-ENTITY>	
				
				<RUNNABLE-ENTITY>
					<SHORT-NAME>LedSwitch</SHORT-NAME>
				    <MINIMUM-START-INTERVAL>0.0</MINIMUM-START-INTERVAL>	
				    <CAN-BE-INVOKED-CONCURRENTLY>false</CAN-BE-INVOKED-CONCURRENTLY>					
					<SYMBOL>LedSwitch_Runnable</SYMBOL>
				</RUNNABLE-ENTITY>
				
				
				
				</RUNNABLES>
				
			</SWC-INTERNAL-BEHAVIOR>	
			
				
			</INTERNAL-BEHAVIORS>	
			
			</ECU-ABSTRACTION-SW-COMPONENT-TYPE>	
			
			<APPLICATION-SW-COMPONENT-TYPE>
				<SHORT-NAME>DoorLock_Indication_SWC</SHORT-NAME>
				<PORTS>
				<R-PORT-PROTOTYPE>
					<SHORT-NAME>RP_SR_DoorState</SHORT-NAME>
					<REQUIRED-INTERFACE-TREF DEST="SENDER-RECEIVER-INTERFACE">/Interfaces/IF_SR_DoorLockSens</REQUIRED-INTERFACE-TREF>
				</R-PORT-PROTOTYPE>	
				
				<R-PORT-PROTOTYPE>
					<SHORT-NAME>RP_CS_LedSwitch</SHORT-NAME>
					<REQUIRED-INTERFACE-TREF DEST="CLIENT-SERVER-INTERFACE">/Interfaces/IF_CS_LED</REQUIRED-INTERFACE-TREF>
				</R-PORT-PROTOTYPE>
			
				</PORTS>
				
				<INTERNAL-BEHAVIORS>
				<SWC-INTERNAL-BEHAVIOR>
					<SHORT-NAME>IB_DoorLock_Indication_SWC</SHORT-NAME>
					<EVENTS>
					<TIMING-EVENT>
						<SHORT-NAME>TE_12ms</SHORT-NAME>
						<START-ON-EVENT-REF DEST="RUNNABLE-ENTITY">/SWCs/DoorLock_Indication_SWC/IB_DoorLock_Indication_SWC/DoorLock_Indication_Runnable</START-ON-EVENT-REF>
						<PERIOD>0.012</PERIOD>
					</TIMING-EVENT>	
					
					</EVENTS>
					<!--/Interfaces/IF_SR_DoorLockSens/DoorLock_State -->
					<RUNNABLES>
					<RUNNABLE-ENTITY>
						<SHORT-NAME>DoorLock_Indication_Runnable</SHORT-NAME>
						<MINIMUM-START-INTERVAL>0.0</MINIMUM-START-INTERVAL>
						<CAN-BE-INVOKED-CONCURRENTLY>false</CAN-BE-INVOKED-CONCURRENTLY>
						<DATA-READ-ACCESSS>
						<VARIABLE-ACCESS>
							<SHORT-NAME>DA_Read</SHORT-NAME>
						<ACCESSED-VARIABLE>
						<AUTOSAR-VARIABLE-IREF>
						<PORT-PROTOTYPE-REF DEST="R-PORT-PROTOTYPE">/SWCs/DoorLock_Indication_SWC/RP_SR_DoorState</PORT-PROTOTYPE-REF>
						<TARGET-DATA-PROTOTYPE-REF DEST="VARIABLE-DATA-PROTOTYPE">/Interfaces/IF_SR_DoorLockSens/DoorLock_State</TARGET-DATA-PROTOTYPE-REF>	
						</AUTOSAR-VARIABLE-IREF>	
						</ACCESSED-VARIABLE>
						</VARIABLE-ACCESS>	
						</DATA-READ-ACCESSS>
					<!-- The runnable needs access to the client port to call the other runnables -->
					<!-- Even though we implemented an operation invoked event so that we are expecting an asynchronous 
						  RTE_Call from this runnable through the client, we will make it Synchronous because there is
                          no OS to map the RTE_EVENT on, so for now it is Synch, but after the OS integration it will be
						  Asynch -->
					<!-- Synch: RTE_Call: just directly calling the runnable so the calling runnable will be bloked-
						 Asynch: RTE_Call: Will just raise the RTE_Event (Operation invoked) so the OS will invoke the 
						 Needed runnable and the calling one could ask about the result any time -->
					<SERVER-CALL-POINTS>
					<SYNCHRONOUS-SERVER-CALL-POINT>
						<SHORT-NAME>ServerCall</SHORT-NAME>
					<OPERATION-IREF>
					<CONTEXT-R-PORT-REF DEST="R-PORT-PROTOTYPE">/SWCs/DoorLock_Indication_SWC/RP_CS_LedSwitch</CONTEXT-R-PORT-REF>	
					<TARGET-REQUIRED-OPERATION-REF DEST="CLIENT-SERVER-OPERATION">/Interfaces/IF_CS_LED/LED_Switch</TARGET-REQUIRED-OPERATION-REF>
					</OPERATION-IREF>
					</SYNCHRONOUS-SERVER-CALL-POINT>
					</SERVER-CALL-POINTS>	
					
					<SYMBOL>DoorLock_Indication_Runnable</SYMBOL>	
					</RUNNABLE-ENTITY>	
					</RUNNABLES>
				</SWC-INTERNAL-BEHAVIOR>	
				
				
				</INTERNAL-BEHAVIORS>
			</APPLICATION-SW-COMPONENT-TYPE>
			</ELEMENTS>
			
			
			
		</AR-PACKAGE>
		<AR-PACKAGE>
			<SHORT-NAME>Composition</SHORT-NAME>
			<ELEMENTS>
			<COMPOSITION-SW-COMPONENT-TYPE>
				<SHORT-NAME>Composite_DoorLock_SWC</SHORT-NAME>
				<COMPONENTS>
				<SW-COMPONENT-PROTOTYPE>
					<SHORT-NAME>DoorLock_Abstraction_SWC</SHORT-NAME>
					<TYPE-TREF DEST="ECU-ABSTRACTION-SW-COMPONENT-TYPE">/SWCs/DoorSensorAbstractionSWC</TYPE-TREF>
				</SW-COMPONENT-PROTOTYPE>	
				
				<SW-COMPONENT-PROTOTYPE>
					<SHORT-NAME>DoorLockIndicationSWC</SHORT-NAME>
					<TYPE-TREF DEST="APPLICATION-SW-COMPONENT-TYPE">/SWCs/DoorLock_Indication_SWC</TYPE-TREF>
				</SW-COMPONENT-PROTOTYPE>
				</COMPONENTS>
				<CONNECTORS>
				<ASSEMBLY-SW-CONNECTOR>
					<SHORT-NAME>ASC_DoorState</SHORT-NAME>
					<PROVIDER-IREF>
					<CONTEXT-COMPONENT-REF DEST="SW-COMPONENT-PROTOTYPE">/Composition/Composite_DoorLock_SWC/DoorLock_Abstraction_SWC</CONTEXT-COMPONENT-REF>
					<TARGET-P-PORT-REF DEST="P-PORT-PROTOTYPE">/SWCs/DoorSensorAbstractionSWC/PP_SR_DoorSens</TARGET-P-PORT-REF>	
					</PROVIDER-IREF>	
					
					<REQUESTER-IREF>
					<CONTEXT-COMPONENT-REF DEST="SW-COMPONENT-PROTOTYPE">/Composition/Composite_DoorLock_SWC/DoorLockIndicationSWC</CONTEXT-COMPONENT-REF>
					<TARGET-R-PORT-REF DEST="R-PORT-PROTOTYPE">/SWCs/DoorLock_Indication_SWC/RP_SR_DoorState</TARGET-R-PORT-REF>	
					</REQUESTER-IREF>
				</ASSEMBLY-SW-CONNECTOR>	
				
				<ASSEMBLY-SW-CONNECTOR>
					<SHORT-NAME>ASC_LedSwitch</SHORT-NAME>
					<PROVIDER-IREF>
					<CONTEXT-COMPONENT-REF DEST="SW-COMPONENT-PROTOTYPE">/Composition/Composite_DoorLock_SWC/DoorLock_Abstraction_SWC</CONTEXT-COMPONENT-REF>
					<TARGET-P-PORT-REF DEST="P-PORT-PROTOTYPE">/SWCs/DoorSensorAbstractionSWC/PP_CS_LedSwitch</TARGET-P-PORT-REF>	
					</PROVIDER-IREF>	
					
					<REQUESTER-IREF>
					<CONTEXT-COMPONENT-REF DEST="SW-COMPONENT-PROTOTYPE">/Composition/Composite_DoorLock_SWC/DoorLockIndicationSWC</CONTEXT-COMPONENT-REF>
					<TARGET-R-PORT-REF DEST="R-PORT-PROTOTYPE">/SWCs/DoorLock_Indication_SWC/RP_CS_LedSwitch</TARGET-R-PORT-REF>	
					</REQUESTER-IREF>
				</ASSEMBLY-SW-CONNECTOR>
				</CONNECTORS>	
			</COMPOSITION-SW-COMPONENT-TYPE>	
			
			
			</ELEMENTS>
			
			
		</AR-PACKAGE>
	</AR-PACKAGES>
</AUTOSAR>